// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldPostedAt holds the string denoting the posted_at field in the database.
	FieldPostedAt = "posted_at"
	// EdgeMessageMedia holds the string denoting the message_media edge name in mutations.
	EdgeMessageMedia = "message_media"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// MessageMediaTable is the table that holds the message_media relation/edge.
	MessageMediaTable = "message_media"
	// MessageMediaInverseTable is the table name for the MessageMedia entity.
	// It exists in this package in order to avoid circular dependency with the "messagemedia" package.
	MessageMediaInverseTable = "message_media"
	// MessageMediaColumn is the table column denoting the message_media relation/edge.
	MessageMediaColumn = "message_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldSubscriptionID,
	FieldText,
	FieldPostedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByPostedAt orders the results by the posted_at field.
func ByPostedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostedAt, opts...).ToFunc()
}

// ByMessageMediaCount orders the results by message_media count.
func ByMessageMediaCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessageMediaStep(), opts...)
	}
}

// ByMessageMedia orders the results by message_media terms.
func ByMessageMedia(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageMediaStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMessageMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageMediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessageMediaTable, MessageMediaColumn),
	)
}
