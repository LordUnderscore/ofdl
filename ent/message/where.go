// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ofdl/ofdl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSubscriptionID, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// PostedAt applies equality check predicate on the "posted_at" field. It's identical to PostedAtEQ.
func PostedAt(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldPostedAt, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldText, v))
}

// PostedAtEQ applies the EQ predicate on the "posted_at" field.
func PostedAtEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldPostedAt, v))
}

// PostedAtNEQ applies the NEQ predicate on the "posted_at" field.
func PostedAtNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldPostedAt, v))
}

// PostedAtIn applies the In predicate on the "posted_at" field.
func PostedAtIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldPostedAt, vs...))
}

// PostedAtNotIn applies the NotIn predicate on the "posted_at" field.
func PostedAtNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldPostedAt, vs...))
}

// PostedAtGT applies the GT predicate on the "posted_at" field.
func PostedAtGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldPostedAt, v))
}

// PostedAtGTE applies the GTE predicate on the "posted_at" field.
func PostedAtGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldPostedAt, v))
}

// PostedAtLT applies the LT predicate on the "posted_at" field.
func PostedAtLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldPostedAt, v))
}

// PostedAtLTE applies the LTE predicate on the "posted_at" field.
func PostedAtLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldPostedAt, v))
}

// PostedAtContains applies the Contains predicate on the "posted_at" field.
func PostedAtContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldPostedAt, v))
}

// PostedAtHasPrefix applies the HasPrefix predicate on the "posted_at" field.
func PostedAtHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldPostedAt, v))
}

// PostedAtHasSuffix applies the HasSuffix predicate on the "posted_at" field.
func PostedAtHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldPostedAt, v))
}

// PostedAtEqualFold applies the EqualFold predicate on the "posted_at" field.
func PostedAtEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldPostedAt, v))
}

// PostedAtContainsFold applies the ContainsFold predicate on the "posted_at" field.
func PostedAtContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldPostedAt, v))
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.MessageMedia) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		p(s.Not())
	})
}
