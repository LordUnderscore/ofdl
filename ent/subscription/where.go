// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ofdl/ofdl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAvatar, v))
}

// Header applies equality check predicate on the "header" field. It's identical to HeaderEQ.
func Header(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldHeader, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldName, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUsername, v))
}

// HeadMarker applies equality check predicate on the "head_marker" field. It's identical to HeadMarkerEQ.
func HeadMarker(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldHeadMarker, v))
}

// StashID applies equality check predicate on the "stash_id" field. It's identical to StashIDEQ.
func StashID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStashID, v))
}

// OrganizedAt applies equality check predicate on the "organized_at" field. It's identical to OrganizedAtEQ.
func OrganizedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldOrganizedAt, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEnabled, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldAvatar, v))
}

// HeaderEQ applies the EQ predicate on the "header" field.
func HeaderEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldHeader, v))
}

// HeaderNEQ applies the NEQ predicate on the "header" field.
func HeaderNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldHeader, v))
}

// HeaderIn applies the In predicate on the "header" field.
func HeaderIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldHeader, vs...))
}

// HeaderNotIn applies the NotIn predicate on the "header" field.
func HeaderNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldHeader, vs...))
}

// HeaderGT applies the GT predicate on the "header" field.
func HeaderGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldHeader, v))
}

// HeaderGTE applies the GTE predicate on the "header" field.
func HeaderGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldHeader, v))
}

// HeaderLT applies the LT predicate on the "header" field.
func HeaderLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldHeader, v))
}

// HeaderLTE applies the LTE predicate on the "header" field.
func HeaderLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldHeader, v))
}

// HeaderContains applies the Contains predicate on the "header" field.
func HeaderContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldHeader, v))
}

// HeaderHasPrefix applies the HasPrefix predicate on the "header" field.
func HeaderHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldHeader, v))
}

// HeaderHasSuffix applies the HasSuffix predicate on the "header" field.
func HeaderHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldHeader, v))
}

// HeaderEqualFold applies the EqualFold predicate on the "header" field.
func HeaderEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldHeader, v))
}

// HeaderContainsFold applies the ContainsFold predicate on the "header" field.
func HeaderContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldHeader, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldName, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldUsername, v))
}

// HeadMarkerEQ applies the EQ predicate on the "head_marker" field.
func HeadMarkerEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldHeadMarker, v))
}

// HeadMarkerNEQ applies the NEQ predicate on the "head_marker" field.
func HeadMarkerNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldHeadMarker, v))
}

// HeadMarkerIn applies the In predicate on the "head_marker" field.
func HeadMarkerIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldHeadMarker, vs...))
}

// HeadMarkerNotIn applies the NotIn predicate on the "head_marker" field.
func HeadMarkerNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldHeadMarker, vs...))
}

// HeadMarkerGT applies the GT predicate on the "head_marker" field.
func HeadMarkerGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldHeadMarker, v))
}

// HeadMarkerGTE applies the GTE predicate on the "head_marker" field.
func HeadMarkerGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldHeadMarker, v))
}

// HeadMarkerLT applies the LT predicate on the "head_marker" field.
func HeadMarkerLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldHeadMarker, v))
}

// HeadMarkerLTE applies the LTE predicate on the "head_marker" field.
func HeadMarkerLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldHeadMarker, v))
}

// HeadMarkerContains applies the Contains predicate on the "head_marker" field.
func HeadMarkerContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldHeadMarker, v))
}

// HeadMarkerHasPrefix applies the HasPrefix predicate on the "head_marker" field.
func HeadMarkerHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldHeadMarker, v))
}

// HeadMarkerHasSuffix applies the HasSuffix predicate on the "head_marker" field.
func HeadMarkerHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldHeadMarker, v))
}

// HeadMarkerIsNil applies the IsNil predicate on the "head_marker" field.
func HeadMarkerIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldHeadMarker))
}

// HeadMarkerNotNil applies the NotNil predicate on the "head_marker" field.
func HeadMarkerNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldHeadMarker))
}

// HeadMarkerEqualFold applies the EqualFold predicate on the "head_marker" field.
func HeadMarkerEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldHeadMarker, v))
}

// HeadMarkerContainsFold applies the ContainsFold predicate on the "head_marker" field.
func HeadMarkerContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldHeadMarker, v))
}

// StashIDEQ applies the EQ predicate on the "stash_id" field.
func StashIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStashID, v))
}

// StashIDNEQ applies the NEQ predicate on the "stash_id" field.
func StashIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStashID, v))
}

// StashIDIn applies the In predicate on the "stash_id" field.
func StashIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStashID, vs...))
}

// StashIDNotIn applies the NotIn predicate on the "stash_id" field.
func StashIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStashID, vs...))
}

// StashIDGT applies the GT predicate on the "stash_id" field.
func StashIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStashID, v))
}

// StashIDGTE applies the GTE predicate on the "stash_id" field.
func StashIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStashID, v))
}

// StashIDLT applies the LT predicate on the "stash_id" field.
func StashIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStashID, v))
}

// StashIDLTE applies the LTE predicate on the "stash_id" field.
func StashIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStashID, v))
}

// StashIDContains applies the Contains predicate on the "stash_id" field.
func StashIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldStashID, v))
}

// StashIDHasPrefix applies the HasPrefix predicate on the "stash_id" field.
func StashIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldStashID, v))
}

// StashIDHasSuffix applies the HasSuffix predicate on the "stash_id" field.
func StashIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldStashID, v))
}

// StashIDIsNil applies the IsNil predicate on the "stash_id" field.
func StashIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldStashID))
}

// StashIDNotNil applies the NotNil predicate on the "stash_id" field.
func StashIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldStashID))
}

// StashIDEqualFold applies the EqualFold predicate on the "stash_id" field.
func StashIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldStashID, v))
}

// StashIDContainsFold applies the ContainsFold predicate on the "stash_id" field.
func StashIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldStashID, v))
}

// OrganizedAtEQ applies the EQ predicate on the "organized_at" field.
func OrganizedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldOrganizedAt, v))
}

// OrganizedAtNEQ applies the NEQ predicate on the "organized_at" field.
func OrganizedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldOrganizedAt, v))
}

// OrganizedAtIn applies the In predicate on the "organized_at" field.
func OrganizedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldOrganizedAt, vs...))
}

// OrganizedAtNotIn applies the NotIn predicate on the "organized_at" field.
func OrganizedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldOrganizedAt, vs...))
}

// OrganizedAtGT applies the GT predicate on the "organized_at" field.
func OrganizedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldOrganizedAt, v))
}

// OrganizedAtGTE applies the GTE predicate on the "organized_at" field.
func OrganizedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldOrganizedAt, v))
}

// OrganizedAtLT applies the LT predicate on the "organized_at" field.
func OrganizedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldOrganizedAt, v))
}

// OrganizedAtLTE applies the LTE predicate on the "organized_at" field.
func OrganizedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldOrganizedAt, v))
}

// OrganizedAtIsNil applies the IsNil predicate on the "organized_at" field.
func OrganizedAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldOrganizedAt))
}

// OrganizedAtNotNil applies the NotNil predicate on the "organized_at" field.
func OrganizedAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldOrganizedAt))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldEnabled, v))
}

// EnabledIsNil applies the IsNil predicate on the "enabled" field.
func EnabledIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldEnabled))
}

// EnabledNotNil applies the NotNil predicate on the "enabled" field.
func EnabledNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldEnabled))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		p(s.Not())
	})
}
