// Code generated by ent, DO NOT EDIT.

package messagemedia

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ofdl/ofdl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldID, id))
}

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldMessageID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldType, v))
}

// Full applies equality check predicate on the "full" field. It's identical to FullEQ.
func Full(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldFull, v))
}

// DownloadedAt applies equality check predicate on the "downloaded_at" field. It's identical to DownloadedAtEQ.
func DownloadedAt(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldDownloadedAt, v))
}

// StashID applies equality check predicate on the "stash_id" field. It's identical to StashIDEQ.
func StashID(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldStashID, v))
}

// OrganizedAt applies equality check predicate on the "organized_at" field. It's identical to OrganizedAtEQ.
func OrganizedAt(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldOrganizedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldUpdatedAt, v))
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldMessageID, v))
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldMessageID, v))
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldMessageID, vs...))
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...int) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldMessageID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldContainsFold(FieldType, v))
}

// FullEQ applies the EQ predicate on the "full" field.
func FullEQ(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldFull, v))
}

// FullNEQ applies the NEQ predicate on the "full" field.
func FullNEQ(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldFull, v))
}

// FullIn applies the In predicate on the "full" field.
func FullIn(vs ...string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldFull, vs...))
}

// FullNotIn applies the NotIn predicate on the "full" field.
func FullNotIn(vs ...string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldFull, vs...))
}

// FullGT applies the GT predicate on the "full" field.
func FullGT(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldFull, v))
}

// FullGTE applies the GTE predicate on the "full" field.
func FullGTE(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldFull, v))
}

// FullLT applies the LT predicate on the "full" field.
func FullLT(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldFull, v))
}

// FullLTE applies the LTE predicate on the "full" field.
func FullLTE(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldFull, v))
}

// FullContains applies the Contains predicate on the "full" field.
func FullContains(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldContains(FieldFull, v))
}

// FullHasPrefix applies the HasPrefix predicate on the "full" field.
func FullHasPrefix(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldHasPrefix(FieldFull, v))
}

// FullHasSuffix applies the HasSuffix predicate on the "full" field.
func FullHasSuffix(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldHasSuffix(FieldFull, v))
}

// FullIsNil applies the IsNil predicate on the "full" field.
func FullIsNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIsNull(FieldFull))
}

// FullNotNil applies the NotNil predicate on the "full" field.
func FullNotNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotNull(FieldFull))
}

// FullEqualFold applies the EqualFold predicate on the "full" field.
func FullEqualFold(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEqualFold(FieldFull, v))
}

// FullContainsFold applies the ContainsFold predicate on the "full" field.
func FullContainsFold(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldContainsFold(FieldFull, v))
}

// DownloadedAtEQ applies the EQ predicate on the "downloaded_at" field.
func DownloadedAtEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldDownloadedAt, v))
}

// DownloadedAtNEQ applies the NEQ predicate on the "downloaded_at" field.
func DownloadedAtNEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldDownloadedAt, v))
}

// DownloadedAtIn applies the In predicate on the "downloaded_at" field.
func DownloadedAtIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldDownloadedAt, vs...))
}

// DownloadedAtNotIn applies the NotIn predicate on the "downloaded_at" field.
func DownloadedAtNotIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldDownloadedAt, vs...))
}

// DownloadedAtGT applies the GT predicate on the "downloaded_at" field.
func DownloadedAtGT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldDownloadedAt, v))
}

// DownloadedAtGTE applies the GTE predicate on the "downloaded_at" field.
func DownloadedAtGTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldDownloadedAt, v))
}

// DownloadedAtLT applies the LT predicate on the "downloaded_at" field.
func DownloadedAtLT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldDownloadedAt, v))
}

// DownloadedAtLTE applies the LTE predicate on the "downloaded_at" field.
func DownloadedAtLTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldDownloadedAt, v))
}

// DownloadedAtIsNil applies the IsNil predicate on the "downloaded_at" field.
func DownloadedAtIsNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIsNull(FieldDownloadedAt))
}

// DownloadedAtNotNil applies the NotNil predicate on the "downloaded_at" field.
func DownloadedAtNotNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotNull(FieldDownloadedAt))
}

// StashIDEQ applies the EQ predicate on the "stash_id" field.
func StashIDEQ(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldStashID, v))
}

// StashIDNEQ applies the NEQ predicate on the "stash_id" field.
func StashIDNEQ(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldStashID, v))
}

// StashIDIn applies the In predicate on the "stash_id" field.
func StashIDIn(vs ...string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldStashID, vs...))
}

// StashIDNotIn applies the NotIn predicate on the "stash_id" field.
func StashIDNotIn(vs ...string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldStashID, vs...))
}

// StashIDGT applies the GT predicate on the "stash_id" field.
func StashIDGT(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldStashID, v))
}

// StashIDGTE applies the GTE predicate on the "stash_id" field.
func StashIDGTE(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldStashID, v))
}

// StashIDLT applies the LT predicate on the "stash_id" field.
func StashIDLT(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldStashID, v))
}

// StashIDLTE applies the LTE predicate on the "stash_id" field.
func StashIDLTE(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldStashID, v))
}

// StashIDContains applies the Contains predicate on the "stash_id" field.
func StashIDContains(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldContains(FieldStashID, v))
}

// StashIDHasPrefix applies the HasPrefix predicate on the "stash_id" field.
func StashIDHasPrefix(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldHasPrefix(FieldStashID, v))
}

// StashIDHasSuffix applies the HasSuffix predicate on the "stash_id" field.
func StashIDHasSuffix(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldHasSuffix(FieldStashID, v))
}

// StashIDIsNil applies the IsNil predicate on the "stash_id" field.
func StashIDIsNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIsNull(FieldStashID))
}

// StashIDNotNil applies the NotNil predicate on the "stash_id" field.
func StashIDNotNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotNull(FieldStashID))
}

// StashIDEqualFold applies the EqualFold predicate on the "stash_id" field.
func StashIDEqualFold(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEqualFold(FieldStashID, v))
}

// StashIDContainsFold applies the ContainsFold predicate on the "stash_id" field.
func StashIDContainsFold(v string) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldContainsFold(FieldStashID, v))
}

// OrganizedAtEQ applies the EQ predicate on the "organized_at" field.
func OrganizedAtEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldOrganizedAt, v))
}

// OrganizedAtNEQ applies the NEQ predicate on the "organized_at" field.
func OrganizedAtNEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldOrganizedAt, v))
}

// OrganizedAtIn applies the In predicate on the "organized_at" field.
func OrganizedAtIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldOrganizedAt, vs...))
}

// OrganizedAtNotIn applies the NotIn predicate on the "organized_at" field.
func OrganizedAtNotIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldOrganizedAt, vs...))
}

// OrganizedAtGT applies the GT predicate on the "organized_at" field.
func OrganizedAtGT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldOrganizedAt, v))
}

// OrganizedAtGTE applies the GTE predicate on the "organized_at" field.
func OrganizedAtGTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldOrganizedAt, v))
}

// OrganizedAtLT applies the LT predicate on the "organized_at" field.
func OrganizedAtLT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldOrganizedAt, v))
}

// OrganizedAtLTE applies the LTE predicate on the "organized_at" field.
func OrganizedAtLTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldOrganizedAt, v))
}

// OrganizedAtIsNil applies the IsNil predicate on the "organized_at" field.
func OrganizedAtIsNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIsNull(FieldOrganizedAt))
}

// OrganizedAtNotNil applies the NotNil predicate on the "organized_at" field.
func OrganizedAtNotNil() predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotNull(FieldOrganizedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MessageMedia {
	return predicate.MessageMedia(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.MessageMedia {
	return predicate.MessageMedia(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.MessageMedia {
	return predicate.MessageMedia(func(s *sql.Selector) {
		step := newMessageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageMedia) predicate.MessageMedia {
	return predicate.MessageMedia(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageMedia) predicate.MessageMedia {
	return predicate.MessageMedia(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageMedia) predicate.MessageMedia {
	return predicate.MessageMedia(func(s *sql.Selector) {
		p(s.Not())
	})
}
