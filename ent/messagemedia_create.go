// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ofdl/ofdl/ent/message"
	"github.com/ofdl/ofdl/ent/messagemedia"
)

// MessageMediaCreate is the builder for creating a MessageMedia entity.
type MessageMediaCreate struct {
	config
	mutation *MessageMediaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMessageID sets the "message_id" field.
func (mmc *MessageMediaCreate) SetMessageID(i int) *MessageMediaCreate {
	mmc.mutation.SetMessageID(i)
	return mmc
}

// SetType sets the "type" field.
func (mmc *MessageMediaCreate) SetType(s string) *MessageMediaCreate {
	mmc.mutation.SetType(s)
	return mmc
}

// SetSrc sets the "src" field.
func (mmc *MessageMediaCreate) SetSrc(s string) *MessageMediaCreate {
	mmc.mutation.SetSrc(s)
	return mmc
}

// SetNillableSrc sets the "src" field if the given value is not nil.
func (mmc *MessageMediaCreate) SetNillableSrc(s *string) *MessageMediaCreate {
	if s != nil {
		mmc.SetSrc(*s)
	}
	return mmc
}

// SetDownloadedAt sets the "downloaded_at" field.
func (mmc *MessageMediaCreate) SetDownloadedAt(t time.Time) *MessageMediaCreate {
	mmc.mutation.SetDownloadedAt(t)
	return mmc
}

// SetNillableDownloadedAt sets the "downloaded_at" field if the given value is not nil.
func (mmc *MessageMediaCreate) SetNillableDownloadedAt(t *time.Time) *MessageMediaCreate {
	if t != nil {
		mmc.SetDownloadedAt(*t)
	}
	return mmc
}

// SetStashID sets the "stash_id" field.
func (mmc *MessageMediaCreate) SetStashID(s string) *MessageMediaCreate {
	mmc.mutation.SetStashID(s)
	return mmc
}

// SetOrganizedAt sets the "organized_at" field.
func (mmc *MessageMediaCreate) SetOrganizedAt(t time.Time) *MessageMediaCreate {
	mmc.mutation.SetOrganizedAt(t)
	return mmc
}

// SetNillableOrganizedAt sets the "organized_at" field if the given value is not nil.
func (mmc *MessageMediaCreate) SetNillableOrganizedAt(t *time.Time) *MessageMediaCreate {
	if t != nil {
		mmc.SetOrganizedAt(*t)
	}
	return mmc
}

// SetCreatedAt sets the "created_at" field.
func (mmc *MessageMediaCreate) SetCreatedAt(t time.Time) *MessageMediaCreate {
	mmc.mutation.SetCreatedAt(t)
	return mmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mmc *MessageMediaCreate) SetNillableCreatedAt(t *time.Time) *MessageMediaCreate {
	if t != nil {
		mmc.SetCreatedAt(*t)
	}
	return mmc
}

// SetUpdatedAt sets the "updated_at" field.
func (mmc *MessageMediaCreate) SetUpdatedAt(t time.Time) *MessageMediaCreate {
	mmc.mutation.SetUpdatedAt(t)
	return mmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mmc *MessageMediaCreate) SetNillableUpdatedAt(t *time.Time) *MessageMediaCreate {
	if t != nil {
		mmc.SetUpdatedAt(*t)
	}
	return mmc
}

// SetID sets the "id" field.
func (mmc *MessageMediaCreate) SetID(i int) *MessageMediaCreate {
	mmc.mutation.SetID(i)
	return mmc
}

// SetMessage sets the "message" edge to the Message entity.
func (mmc *MessageMediaCreate) SetMessage(m *Message) *MessageMediaCreate {
	return mmc.SetMessageID(m.ID)
}

// Mutation returns the MessageMediaMutation object of the builder.
func (mmc *MessageMediaCreate) Mutation() *MessageMediaMutation {
	return mmc.mutation
}

// Save creates the MessageMedia in the database.
func (mmc *MessageMediaCreate) Save(ctx context.Context) (*MessageMedia, error) {
	mmc.defaults()
	return withHooks(ctx, mmc.sqlSave, mmc.mutation, mmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mmc *MessageMediaCreate) SaveX(ctx context.Context) *MessageMedia {
	v, err := mmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmc *MessageMediaCreate) Exec(ctx context.Context) error {
	_, err := mmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmc *MessageMediaCreate) ExecX(ctx context.Context) {
	if err := mmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmc *MessageMediaCreate) defaults() {
	if _, ok := mmc.mutation.CreatedAt(); !ok {
		v := messagemedia.DefaultCreatedAt()
		mmc.mutation.SetCreatedAt(v)
	}
	if _, ok := mmc.mutation.UpdatedAt(); !ok {
		v := messagemedia.DefaultUpdatedAt()
		mmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmc *MessageMediaCreate) check() error {
	if _, ok := mmc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "MessageMedia.message_id"`)}
	}
	if _, ok := mmc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "MessageMedia.type"`)}
	}
	if _, ok := mmc.mutation.StashID(); !ok {
		return &ValidationError{Name: "stash_id", err: errors.New(`ent: missing required field "MessageMedia.stash_id"`)}
	}
	if _, ok := mmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MessageMedia.created_at"`)}
	}
	if _, ok := mmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MessageMedia.updated_at"`)}
	}
	if v, ok := mmc.mutation.ID(); ok {
		if err := messagemedia.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MessageMedia.id": %w`, err)}
		}
	}
	if _, ok := mmc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required edge "MessageMedia.message"`)}
	}
	return nil
}

func (mmc *MessageMediaCreate) sqlSave(ctx context.Context) (*MessageMedia, error) {
	if err := mmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mmc.mutation.id = &_node.ID
	mmc.mutation.done = true
	return _node, nil
}

func (mmc *MessageMediaCreate) createSpec() (*MessageMedia, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageMedia{config: mmc.config}
		_spec = sqlgraph.NewCreateSpec(messagemedia.Table, sqlgraph.NewFieldSpec(messagemedia.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mmc.conflict
	if id, ok := mmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mmc.mutation.GetType(); ok {
		_spec.SetField(messagemedia.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mmc.mutation.Src(); ok {
		_spec.SetField(messagemedia.FieldSrc, field.TypeString, value)
		_node.Src = value
	}
	if value, ok := mmc.mutation.DownloadedAt(); ok {
		_spec.SetField(messagemedia.FieldDownloadedAt, field.TypeTime, value)
		_node.DownloadedAt = value
	}
	if value, ok := mmc.mutation.StashID(); ok {
		_spec.SetField(messagemedia.FieldStashID, field.TypeString, value)
		_node.StashID = value
	}
	if value, ok := mmc.mutation.OrganizedAt(); ok {
		_spec.SetField(messagemedia.FieldOrganizedAt, field.TypeTime, value)
		_node.OrganizedAt = value
	}
	if value, ok := mmc.mutation.CreatedAt(); ok {
		_spec.SetField(messagemedia.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mmc.mutation.UpdatedAt(); ok {
		_spec.SetField(messagemedia.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mmc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagemedia.MessageTable,
			Columns: []string{messagemedia.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MessageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageMedia.Create().
//		SetMessageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageMediaUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (mmc *MessageMediaCreate) OnConflict(opts ...sql.ConflictOption) *MessageMediaUpsertOne {
	mmc.conflict = opts
	return &MessageMediaUpsertOne{
		create: mmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageMedia.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mmc *MessageMediaCreate) OnConflictColumns(columns ...string) *MessageMediaUpsertOne {
	mmc.conflict = append(mmc.conflict, sql.ConflictColumns(columns...))
	return &MessageMediaUpsertOne{
		create: mmc,
	}
}

type (
	// MessageMediaUpsertOne is the builder for "upsert"-ing
	//  one MessageMedia node.
	MessageMediaUpsertOne struct {
		create *MessageMediaCreate
	}

	// MessageMediaUpsert is the "OnConflict" setter.
	MessageMediaUpsert struct {
		*sql.UpdateSet
	}
)

// SetMessageID sets the "message_id" field.
func (u *MessageMediaUpsert) SetMessageID(v int) *MessageMediaUpsert {
	u.Set(messagemedia.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateMessageID() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldMessageID)
	return u
}

// SetType sets the "type" field.
func (u *MessageMediaUpsert) SetType(v string) *MessageMediaUpsert {
	u.Set(messagemedia.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateType() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldType)
	return u
}

// SetSrc sets the "src" field.
func (u *MessageMediaUpsert) SetSrc(v string) *MessageMediaUpsert {
	u.Set(messagemedia.FieldSrc, v)
	return u
}

// UpdateSrc sets the "src" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateSrc() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldSrc)
	return u
}

// ClearSrc clears the value of the "src" field.
func (u *MessageMediaUpsert) ClearSrc() *MessageMediaUpsert {
	u.SetNull(messagemedia.FieldSrc)
	return u
}

// SetDownloadedAt sets the "downloaded_at" field.
func (u *MessageMediaUpsert) SetDownloadedAt(v time.Time) *MessageMediaUpsert {
	u.Set(messagemedia.FieldDownloadedAt, v)
	return u
}

// UpdateDownloadedAt sets the "downloaded_at" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateDownloadedAt() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldDownloadedAt)
	return u
}

// ClearDownloadedAt clears the value of the "downloaded_at" field.
func (u *MessageMediaUpsert) ClearDownloadedAt() *MessageMediaUpsert {
	u.SetNull(messagemedia.FieldDownloadedAt)
	return u
}

// SetStashID sets the "stash_id" field.
func (u *MessageMediaUpsert) SetStashID(v string) *MessageMediaUpsert {
	u.Set(messagemedia.FieldStashID, v)
	return u
}

// UpdateStashID sets the "stash_id" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateStashID() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldStashID)
	return u
}

// SetOrganizedAt sets the "organized_at" field.
func (u *MessageMediaUpsert) SetOrganizedAt(v time.Time) *MessageMediaUpsert {
	u.Set(messagemedia.FieldOrganizedAt, v)
	return u
}

// UpdateOrganizedAt sets the "organized_at" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateOrganizedAt() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldOrganizedAt)
	return u
}

// ClearOrganizedAt clears the value of the "organized_at" field.
func (u *MessageMediaUpsert) ClearOrganizedAt() *MessageMediaUpsert {
	u.SetNull(messagemedia.FieldOrganizedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MessageMediaUpsert) SetCreatedAt(v time.Time) *MessageMediaUpsert {
	u.Set(messagemedia.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateCreatedAt() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageMediaUpsert) SetUpdatedAt(v time.Time) *MessageMediaUpsert {
	u.Set(messagemedia.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageMediaUpsert) UpdateUpdatedAt() *MessageMediaUpsert {
	u.SetExcluded(messagemedia.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MessageMedia.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messagemedia.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageMediaUpsertOne) UpdateNewValues() *MessageMediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(messagemedia.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageMedia.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MessageMediaUpsertOne) Ignore() *MessageMediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageMediaUpsertOne) DoNothing() *MessageMediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageMediaCreate.OnConflict
// documentation for more info.
func (u *MessageMediaUpsertOne) Update(set func(*MessageMediaUpsert)) *MessageMediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageMediaUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessageID sets the "message_id" field.
func (u *MessageMediaUpsertOne) SetMessageID(v int) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateMessageID() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateMessageID()
	})
}

// SetType sets the "type" field.
func (u *MessageMediaUpsertOne) SetType(v string) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateType() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateType()
	})
}

// SetSrc sets the "src" field.
func (u *MessageMediaUpsertOne) SetSrc(v string) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetSrc(v)
	})
}

// UpdateSrc sets the "src" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateSrc() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateSrc()
	})
}

// ClearSrc clears the value of the "src" field.
func (u *MessageMediaUpsertOne) ClearSrc() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.ClearSrc()
	})
}

// SetDownloadedAt sets the "downloaded_at" field.
func (u *MessageMediaUpsertOne) SetDownloadedAt(v time.Time) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetDownloadedAt(v)
	})
}

// UpdateDownloadedAt sets the "downloaded_at" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateDownloadedAt() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateDownloadedAt()
	})
}

// ClearDownloadedAt clears the value of the "downloaded_at" field.
func (u *MessageMediaUpsertOne) ClearDownloadedAt() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.ClearDownloadedAt()
	})
}

// SetStashID sets the "stash_id" field.
func (u *MessageMediaUpsertOne) SetStashID(v string) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetStashID(v)
	})
}

// UpdateStashID sets the "stash_id" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateStashID() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateStashID()
	})
}

// SetOrganizedAt sets the "organized_at" field.
func (u *MessageMediaUpsertOne) SetOrganizedAt(v time.Time) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetOrganizedAt(v)
	})
}

// UpdateOrganizedAt sets the "organized_at" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateOrganizedAt() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateOrganizedAt()
	})
}

// ClearOrganizedAt clears the value of the "organized_at" field.
func (u *MessageMediaUpsertOne) ClearOrganizedAt() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.ClearOrganizedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MessageMediaUpsertOne) SetCreatedAt(v time.Time) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateCreatedAt() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageMediaUpsertOne) SetUpdatedAt(v time.Time) *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageMediaUpsertOne) UpdateUpdatedAt() *MessageMediaUpsertOne {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MessageMediaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageMediaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageMediaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MessageMediaUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MessageMediaUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MessageMediaCreateBulk is the builder for creating many MessageMedia entities in bulk.
type MessageMediaCreateBulk struct {
	config
	builders []*MessageMediaCreate
	conflict []sql.ConflictOption
}

// Save creates the MessageMedia entities in the database.
func (mmcb *MessageMediaCreateBulk) Save(ctx context.Context) ([]*MessageMedia, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mmcb.builders))
	nodes := make([]*MessageMedia, len(mmcb.builders))
	mutators := make([]Mutator, len(mmcb.builders))
	for i := range mmcb.builders {
		func(i int, root context.Context) {
			builder := mmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mmcb *MessageMediaCreateBulk) SaveX(ctx context.Context) []*MessageMedia {
	v, err := mmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmcb *MessageMediaCreateBulk) Exec(ctx context.Context) error {
	_, err := mmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmcb *MessageMediaCreateBulk) ExecX(ctx context.Context) {
	if err := mmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageMedia.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageMediaUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (mmcb *MessageMediaCreateBulk) OnConflict(opts ...sql.ConflictOption) *MessageMediaUpsertBulk {
	mmcb.conflict = opts
	return &MessageMediaUpsertBulk{
		create: mmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageMedia.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mmcb *MessageMediaCreateBulk) OnConflictColumns(columns ...string) *MessageMediaUpsertBulk {
	mmcb.conflict = append(mmcb.conflict, sql.ConflictColumns(columns...))
	return &MessageMediaUpsertBulk{
		create: mmcb,
	}
}

// MessageMediaUpsertBulk is the builder for "upsert"-ing
// a bulk of MessageMedia nodes.
type MessageMediaUpsertBulk struct {
	create *MessageMediaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MessageMedia.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messagemedia.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageMediaUpsertBulk) UpdateNewValues() *MessageMediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(messagemedia.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageMedia.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MessageMediaUpsertBulk) Ignore() *MessageMediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageMediaUpsertBulk) DoNothing() *MessageMediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageMediaCreateBulk.OnConflict
// documentation for more info.
func (u *MessageMediaUpsertBulk) Update(set func(*MessageMediaUpsert)) *MessageMediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageMediaUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessageID sets the "message_id" field.
func (u *MessageMediaUpsertBulk) SetMessageID(v int) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateMessageID() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateMessageID()
	})
}

// SetType sets the "type" field.
func (u *MessageMediaUpsertBulk) SetType(v string) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateType() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateType()
	})
}

// SetSrc sets the "src" field.
func (u *MessageMediaUpsertBulk) SetSrc(v string) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetSrc(v)
	})
}

// UpdateSrc sets the "src" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateSrc() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateSrc()
	})
}

// ClearSrc clears the value of the "src" field.
func (u *MessageMediaUpsertBulk) ClearSrc() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.ClearSrc()
	})
}

// SetDownloadedAt sets the "downloaded_at" field.
func (u *MessageMediaUpsertBulk) SetDownloadedAt(v time.Time) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetDownloadedAt(v)
	})
}

// UpdateDownloadedAt sets the "downloaded_at" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateDownloadedAt() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateDownloadedAt()
	})
}

// ClearDownloadedAt clears the value of the "downloaded_at" field.
func (u *MessageMediaUpsertBulk) ClearDownloadedAt() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.ClearDownloadedAt()
	})
}

// SetStashID sets the "stash_id" field.
func (u *MessageMediaUpsertBulk) SetStashID(v string) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetStashID(v)
	})
}

// UpdateStashID sets the "stash_id" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateStashID() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateStashID()
	})
}

// SetOrganizedAt sets the "organized_at" field.
func (u *MessageMediaUpsertBulk) SetOrganizedAt(v time.Time) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetOrganizedAt(v)
	})
}

// UpdateOrganizedAt sets the "organized_at" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateOrganizedAt() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateOrganizedAt()
	})
}

// ClearOrganizedAt clears the value of the "organized_at" field.
func (u *MessageMediaUpsertBulk) ClearOrganizedAt() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.ClearOrganizedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MessageMediaUpsertBulk) SetCreatedAt(v time.Time) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateCreatedAt() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageMediaUpsertBulk) SetUpdatedAt(v time.Time) *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageMediaUpsertBulk) UpdateUpdatedAt() *MessageMediaUpsertBulk {
	return u.Update(func(s *MessageMediaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MessageMediaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MessageMediaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageMediaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageMediaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
