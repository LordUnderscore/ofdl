// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ofdl/ofdl/ent/messagemedia"
	"github.com/ofdl/ofdl/ent/predicate"
)

// MessageMediaUpdate is the builder for updating MessageMedia entities.
type MessageMediaUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMediaMutation
}

// Where appends a list predicates to the MessageMediaUpdate builder.
func (mmu *MessageMediaUpdate) Where(ps ...predicate.MessageMedia) *MessageMediaUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetMessageID sets the "message_id" field.
func (mmu *MessageMediaUpdate) SetMessageID(i int) *MessageMediaUpdate {
	mmu.mutation.ResetMessageID()
	mmu.mutation.SetMessageID(i)
	return mmu
}

// AddMessageID adds i to the "message_id" field.
func (mmu *MessageMediaUpdate) AddMessageID(i int) *MessageMediaUpdate {
	mmu.mutation.AddMessageID(i)
	return mmu
}

// SetType sets the "type" field.
func (mmu *MessageMediaUpdate) SetType(s string) *MessageMediaUpdate {
	mmu.mutation.SetType(s)
	return mmu
}

// SetFull sets the "full" field.
func (mmu *MessageMediaUpdate) SetFull(s string) *MessageMediaUpdate {
	mmu.mutation.SetFull(s)
	return mmu
}

// SetDownloadedAt sets the "downloaded_at" field.
func (mmu *MessageMediaUpdate) SetDownloadedAt(t time.Time) *MessageMediaUpdate {
	mmu.mutation.SetDownloadedAt(t)
	return mmu
}

// SetNillableDownloadedAt sets the "downloaded_at" field if the given value is not nil.
func (mmu *MessageMediaUpdate) SetNillableDownloadedAt(t *time.Time) *MessageMediaUpdate {
	if t != nil {
		mmu.SetDownloadedAt(*t)
	}
	return mmu
}

// ClearDownloadedAt clears the value of the "downloaded_at" field.
func (mmu *MessageMediaUpdate) ClearDownloadedAt() *MessageMediaUpdate {
	mmu.mutation.ClearDownloadedAt()
	return mmu
}

// SetStashID sets the "stash_id" field.
func (mmu *MessageMediaUpdate) SetStashID(s string) *MessageMediaUpdate {
	mmu.mutation.SetStashID(s)
	return mmu
}

// SetOrganizedAt sets the "organized_at" field.
func (mmu *MessageMediaUpdate) SetOrganizedAt(t time.Time) *MessageMediaUpdate {
	mmu.mutation.SetOrganizedAt(t)
	return mmu
}

// SetNillableOrganizedAt sets the "organized_at" field if the given value is not nil.
func (mmu *MessageMediaUpdate) SetNillableOrganizedAt(t *time.Time) *MessageMediaUpdate {
	if t != nil {
		mmu.SetOrganizedAt(*t)
	}
	return mmu
}

// ClearOrganizedAt clears the value of the "organized_at" field.
func (mmu *MessageMediaUpdate) ClearOrganizedAt() *MessageMediaUpdate {
	mmu.mutation.ClearOrganizedAt()
	return mmu
}

// Mutation returns the MessageMediaMutation object of the builder.
func (mmu *MessageMediaUpdate) Mutation() *MessageMediaMutation {
	return mmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *MessageMediaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *MessageMediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *MessageMediaUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *MessageMediaUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmu *MessageMediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(messagemedia.Table, messagemedia.Columns, sqlgraph.NewFieldSpec(messagemedia.FieldID, field.TypeInt))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.MessageID(); ok {
		_spec.SetField(messagemedia.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.AddedMessageID(); ok {
		_spec.AddField(messagemedia.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.GetType(); ok {
		_spec.SetField(messagemedia.FieldType, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Full(); ok {
		_spec.SetField(messagemedia.FieldFull, field.TypeString, value)
	}
	if value, ok := mmu.mutation.DownloadedAt(); ok {
		_spec.SetField(messagemedia.FieldDownloadedAt, field.TypeTime, value)
	}
	if mmu.mutation.DownloadedAtCleared() {
		_spec.ClearField(messagemedia.FieldDownloadedAt, field.TypeTime)
	}
	if value, ok := mmu.mutation.StashID(); ok {
		_spec.SetField(messagemedia.FieldStashID, field.TypeString, value)
	}
	if value, ok := mmu.mutation.OrganizedAt(); ok {
		_spec.SetField(messagemedia.FieldOrganizedAt, field.TypeTime, value)
	}
	if mmu.mutation.OrganizedAtCleared() {
		_spec.ClearField(messagemedia.FieldOrganizedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagemedia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true
	return n, nil
}

// MessageMediaUpdateOne is the builder for updating a single MessageMedia entity.
type MessageMediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMediaMutation
}

// SetMessageID sets the "message_id" field.
func (mmuo *MessageMediaUpdateOne) SetMessageID(i int) *MessageMediaUpdateOne {
	mmuo.mutation.ResetMessageID()
	mmuo.mutation.SetMessageID(i)
	return mmuo
}

// AddMessageID adds i to the "message_id" field.
func (mmuo *MessageMediaUpdateOne) AddMessageID(i int) *MessageMediaUpdateOne {
	mmuo.mutation.AddMessageID(i)
	return mmuo
}

// SetType sets the "type" field.
func (mmuo *MessageMediaUpdateOne) SetType(s string) *MessageMediaUpdateOne {
	mmuo.mutation.SetType(s)
	return mmuo
}

// SetFull sets the "full" field.
func (mmuo *MessageMediaUpdateOne) SetFull(s string) *MessageMediaUpdateOne {
	mmuo.mutation.SetFull(s)
	return mmuo
}

// SetDownloadedAt sets the "downloaded_at" field.
func (mmuo *MessageMediaUpdateOne) SetDownloadedAt(t time.Time) *MessageMediaUpdateOne {
	mmuo.mutation.SetDownloadedAt(t)
	return mmuo
}

// SetNillableDownloadedAt sets the "downloaded_at" field if the given value is not nil.
func (mmuo *MessageMediaUpdateOne) SetNillableDownloadedAt(t *time.Time) *MessageMediaUpdateOne {
	if t != nil {
		mmuo.SetDownloadedAt(*t)
	}
	return mmuo
}

// ClearDownloadedAt clears the value of the "downloaded_at" field.
func (mmuo *MessageMediaUpdateOne) ClearDownloadedAt() *MessageMediaUpdateOne {
	mmuo.mutation.ClearDownloadedAt()
	return mmuo
}

// SetStashID sets the "stash_id" field.
func (mmuo *MessageMediaUpdateOne) SetStashID(s string) *MessageMediaUpdateOne {
	mmuo.mutation.SetStashID(s)
	return mmuo
}

// SetOrganizedAt sets the "organized_at" field.
func (mmuo *MessageMediaUpdateOne) SetOrganizedAt(t time.Time) *MessageMediaUpdateOne {
	mmuo.mutation.SetOrganizedAt(t)
	return mmuo
}

// SetNillableOrganizedAt sets the "organized_at" field if the given value is not nil.
func (mmuo *MessageMediaUpdateOne) SetNillableOrganizedAt(t *time.Time) *MessageMediaUpdateOne {
	if t != nil {
		mmuo.SetOrganizedAt(*t)
	}
	return mmuo
}

// ClearOrganizedAt clears the value of the "organized_at" field.
func (mmuo *MessageMediaUpdateOne) ClearOrganizedAt() *MessageMediaUpdateOne {
	mmuo.mutation.ClearOrganizedAt()
	return mmuo
}

// Mutation returns the MessageMediaMutation object of the builder.
func (mmuo *MessageMediaUpdateOne) Mutation() *MessageMediaMutation {
	return mmuo.mutation
}

// Where appends a list predicates to the MessageMediaUpdate builder.
func (mmuo *MessageMediaUpdateOne) Where(ps ...predicate.MessageMedia) *MessageMediaUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *MessageMediaUpdateOne) Select(field string, fields ...string) *MessageMediaUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated MessageMedia entity.
func (mmuo *MessageMediaUpdateOne) Save(ctx context.Context) (*MessageMedia, error) {
	return withHooks(ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *MessageMediaUpdateOne) SaveX(ctx context.Context) *MessageMedia {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *MessageMediaUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *MessageMediaUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmuo *MessageMediaUpdateOne) sqlSave(ctx context.Context) (_node *MessageMedia, err error) {
	_spec := sqlgraph.NewUpdateSpec(messagemedia.Table, messagemedia.Columns, sqlgraph.NewFieldSpec(messagemedia.FieldID, field.TypeInt))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageMedia.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagemedia.FieldID)
		for _, f := range fields {
			if !messagemedia.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagemedia.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.MessageID(); ok {
		_spec.SetField(messagemedia.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.AddedMessageID(); ok {
		_spec.AddField(messagemedia.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.GetType(); ok {
		_spec.SetField(messagemedia.FieldType, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Full(); ok {
		_spec.SetField(messagemedia.FieldFull, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.DownloadedAt(); ok {
		_spec.SetField(messagemedia.FieldDownloadedAt, field.TypeTime, value)
	}
	if mmuo.mutation.DownloadedAtCleared() {
		_spec.ClearField(messagemedia.FieldDownloadedAt, field.TypeTime)
	}
	if value, ok := mmuo.mutation.StashID(); ok {
		_spec.SetField(messagemedia.FieldStashID, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.OrganizedAt(); ok {
		_spec.SetField(messagemedia.FieldOrganizedAt, field.TypeTime, value)
	}
	if mmuo.mutation.OrganizedAtCleared() {
		_spec.ClearField(messagemedia.FieldOrganizedAt, field.TypeTime)
	}
	_node = &MessageMedia{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagemedia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mmuo.mutation.done = true
	return _node, nil
}
