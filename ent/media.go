// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ofdl/ofdl/ent/media"
	"github.com/ofdl/ofdl/ent/post"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID int `json:"post_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Full holds the value of the "full" field.
	Full string `json:"full,omitempty"`
	// DownloadedAt holds the value of the "downloaded_at" field.
	DownloadedAt time.Time `json:"downloaded_at,omitempty"`
	// StashID holds the value of the "stash_id" field.
	StashID string `json:"stash_id,omitempty"`
	// OrganizedAt holds the value of the "organized_at" field.
	OrganizedAt time.Time `json:"organized_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges        MediaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[0] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldID, media.FieldPostID:
			values[i] = new(sql.NullInt64)
		case media.FieldType, media.FieldFull, media.FieldStashID:
			values[i] = new(sql.NullString)
		case media.FieldDownloadedAt, media.FieldOrganizedAt, media.FieldCreatedAt, media.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				m.PostID = int(value.Int64)
			}
		case media.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = value.String
			}
		case media.FieldFull:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full", values[i])
			} else if value.Valid {
				m.Full = value.String
			}
		case media.FieldDownloadedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field downloaded_at", values[i])
			} else if value.Valid {
				m.DownloadedAt = value.Time
			}
		case media.FieldStashID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stash_id", values[i])
			} else if value.Valid {
				m.StashID = value.String
			}
		case media.FieldOrganizedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field organized_at", values[i])
			} else if value.Valid {
				m.OrganizedAt = value.Time
			}
		case media.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case media.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the Media entity.
func (m *Media) QueryPost() *PostQuery {
	return NewMediaClient(m.config).QueryPost(m)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", m.PostID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(m.Type)
	builder.WriteString(", ")
	builder.WriteString("full=")
	builder.WriteString(m.Full)
	builder.WriteString(", ")
	builder.WriteString("downloaded_at=")
	builder.WriteString(m.DownloadedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("stash_id=")
	builder.WriteString(m.StashID)
	builder.WriteString(", ")
	builder.WriteString("organized_at=")
	builder.WriteString(m.OrganizedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Directory returns the directory in which the Media is stored
func (m *Media) Directory() string {
	return fmt.Sprintf("/%s/posts/%d", m.Edges.Post.Edges.Subscription.Username, m.Edges.Post.ID)
}

// Filename returns the filename of the Media
func (m *Media) Filename() string {
	u, _ := url.Parse(m.GetFull())
	return path.Base(u.Path)
}

// MarkDownloaded marks the media as downloaded
func (m *Media) MarkDownloaded(ctx context.Context) error {
	return m.Update().SetDownloadedAt(time.Now()).Exec(ctx)
}

// GetPostID returns the post_id column
func (m *Media) GetPostID() int {
	return m.PostID
}

// GetType returns the type column
func (m *Media) GetType() string {
	return m.Type
}

// GetFull returns the full column
func (m *Media) GetFull() string {
	return m.Full
}

// GetDownloadedAt returns the downloaded_at column
func (m *Media) GetDownloadedAt() time.Time {
	return m.DownloadedAt
}

// GetStashID returns the stash_id column
func (m *Media) GetStashID() string {
	return m.StashID
}

// GetOrganizedAt returns the organized_at column
func (m *Media) GetOrganizedAt() time.Time {
	return m.OrganizedAt
}

// GetCreatedAt returns the created_at column
func (m *Media) GetCreatedAt() time.Time {
	return m.CreatedAt
}

// GetUpdatedAt returns the updated_at column
func (m *Media) GetUpdatedAt() time.Time {
	return m.UpdatedAt
}

// Organize marks the Media as organized and sets the stash ID.
func (m *Media) Organize(ctx context.Context, id string) error {
	return m.Update().SetOrganizedAt(time.Now()).SetStashID(id).Exec(ctx)
}

// MarkOrganized marks the Media as organized.
func (m *Media) MarkOrganized(ctx context.Context) error {
	return m.Update().SetOrganizedAt(time.Now()).Exec(ctx)
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
