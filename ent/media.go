// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ofdl/ofdl/ent/media"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID int `json:"post_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Full holds the value of the "full" field.
	Full string `json:"full,omitempty"`
	// DownloadedAt holds the value of the "downloaded_at" field.
	DownloadedAt time.Time `json:"downloaded_at,omitempty"`
	// StashID holds the value of the "stash_id" field.
	StashID string `json:"stash_id,omitempty"`
	// OrganizedAt holds the value of the "organized_at" field.
	OrganizedAt  time.Time `json:"organized_at,omitempty"`
	post_id      *int
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldID, media.FieldPostID:
			values[i] = new(sql.NullInt64)
		case media.FieldType, media.FieldFull, media.FieldStashID:
			values[i] = new(sql.NullString)
		case media.FieldDownloadedAt, media.FieldOrganizedAt:
			values[i] = new(sql.NullTime)
		case media.ForeignKeys[0]: // post_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				m.PostID = int(value.Int64)
			}
		case media.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = value.String
			}
		case media.FieldFull:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full", values[i])
			} else if value.Valid {
				m.Full = value.String
			}
		case media.FieldDownloadedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field downloaded_at", values[i])
			} else if value.Valid {
				m.DownloadedAt = value.Time
			}
		case media.FieldStashID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stash_id", values[i])
			} else if value.Valid {
				m.StashID = value.String
			}
		case media.FieldOrganizedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field organized_at", values[i])
			} else if value.Valid {
				m.OrganizedAt = value.Time
			}
		case media.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field post_id", value)
			} else if value.Valid {
				m.post_id = new(int)
				*m.post_id = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", m.PostID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(m.Type)
	builder.WriteString(", ")
	builder.WriteString("full=")
	builder.WriteString(m.Full)
	builder.WriteString(", ")
	builder.WriteString("downloaded_at=")
	builder.WriteString(m.DownloadedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("stash_id=")
	builder.WriteString(m.StashID)
	builder.WriteString(", ")
	builder.WriteString("organized_at=")
	builder.WriteString(m.OrganizedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
