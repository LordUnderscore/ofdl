// Code generated by ent, DO NOT EDIT.

package media

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the media type in the database.
	Label = "media"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPostID holds the string denoting the post_id field in the database.
	FieldPostID = "post_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFull holds the string denoting the full field in the database.
	FieldFull = "full"
	// FieldPostedAt holds the string denoting the posted_at field in the database.
	FieldPostedAt = "posted_at"
	// FieldDownloadedAt holds the string denoting the downloaded_at field in the database.
	FieldDownloadedAt = "downloaded_at"
	// FieldStashID holds the string denoting the stash_id field in the database.
	FieldStashID = "stash_id"
	// FieldOrganizedAt holds the string denoting the organized_at field in the database.
	FieldOrganizedAt = "organized_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// Table holds the table name of the media in the database.
	Table = "media"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "media"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_id"
)

// Columns holds all SQL columns for media fields.
var Columns = []string{
	FieldID,
	FieldPostID,
	FieldType,
	FieldFull,
	FieldPostedAt,
	FieldDownloadedAt,
	FieldStashID,
	FieldOrganizedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Media queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPostID orders the results by the post_id field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFull orders the results by the full field.
func ByFull(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFull, opts...).ToFunc()
}

// ByPostedAt orders the results by the posted_at field.
func ByPostedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostedAt, opts...).ToFunc()
}

// ByDownloadedAt orders the results by the downloaded_at field.
func ByDownloadedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadedAt, opts...).ToFunc()
}

// ByStashID orders the results by the stash_id field.
func ByStashID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStashID, opts...).ToFunc()
}

// ByOrganizedAt orders the results by the organized_at field.
func ByOrganizedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPostField orders the results by post field.
func ByPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), sql.OrderByField(field, opts...))
	}
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
	)
}
