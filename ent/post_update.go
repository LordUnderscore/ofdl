// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ofdl/ofdl/ent/media"
	"github.com/ofdl/ofdl/ent/post"
	"github.com/ofdl/ofdl/ent/predicate"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSubscriptionID sets the "subscription_id" field.
func (pu *PostUpdate) SetSubscriptionID(i int) *PostUpdate {
	pu.mutation.ResetSubscriptionID()
	pu.mutation.SetSubscriptionID(i)
	return pu
}

// AddSubscriptionID adds i to the "subscription_id" field.
func (pu *PostUpdate) AddSubscriptionID(i int) *PostUpdate {
	pu.mutation.AddSubscriptionID(i)
	return pu
}

// SetText sets the "text" field.
func (pu *PostUpdate) SetText(s string) *PostUpdate {
	pu.mutation.SetText(s)
	return pu
}

// SetPostedAt sets the "posted_at" field.
func (pu *PostUpdate) SetPostedAt(s string) *PostUpdate {
	pu.mutation.SetPostedAt(s)
	return pu
}

// AddMediaIDs adds the "medias" edge to the Media entity by IDs.
func (pu *PostUpdate) AddMediaIDs(ids ...int) *PostUpdate {
	pu.mutation.AddMediaIDs(ids...)
	return pu
}

// AddMedias adds the "medias" edges to the Media entity.
func (pu *PostUpdate) AddMedias(m ...*Media) *PostUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMediaIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearMedias clears all "medias" edges to the Media entity.
func (pu *PostUpdate) ClearMedias() *PostUpdate {
	pu.mutation.ClearMedias()
	return pu
}

// RemoveMediaIDs removes the "medias" edge to Media entities by IDs.
func (pu *PostUpdate) RemoveMediaIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveMediaIDs(ids...)
	return pu
}

// RemoveMedias removes "medias" edges to Media entities.
func (pu *PostUpdate) RemoveMedias(m ...*Media) *PostUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMediaIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.SubscriptionID(); ok {
		_spec.SetField(post.FieldSubscriptionID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSubscriptionID(); ok {
		_spec.AddField(post.FieldSubscriptionID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Text(); ok {
		_spec.SetField(post.FieldText, field.TypeString, value)
	}
	if value, ok := pu.mutation.PostedAt(); ok {
		_spec.SetField(post.FieldPostedAt, field.TypeString, value)
	}
	if pu.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMediasIDs(); len(nodes) > 0 && !pu.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MediasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetSubscriptionID sets the "subscription_id" field.
func (puo *PostUpdateOne) SetSubscriptionID(i int) *PostUpdateOne {
	puo.mutation.ResetSubscriptionID()
	puo.mutation.SetSubscriptionID(i)
	return puo
}

// AddSubscriptionID adds i to the "subscription_id" field.
func (puo *PostUpdateOne) AddSubscriptionID(i int) *PostUpdateOne {
	puo.mutation.AddSubscriptionID(i)
	return puo
}

// SetText sets the "text" field.
func (puo *PostUpdateOne) SetText(s string) *PostUpdateOne {
	puo.mutation.SetText(s)
	return puo
}

// SetPostedAt sets the "posted_at" field.
func (puo *PostUpdateOne) SetPostedAt(s string) *PostUpdateOne {
	puo.mutation.SetPostedAt(s)
	return puo
}

// AddMediaIDs adds the "medias" edge to the Media entity by IDs.
func (puo *PostUpdateOne) AddMediaIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddMediaIDs(ids...)
	return puo
}

// AddMedias adds the "medias" edges to the Media entity.
func (puo *PostUpdateOne) AddMedias(m ...*Media) *PostUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMediaIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearMedias clears all "medias" edges to the Media entity.
func (puo *PostUpdateOne) ClearMedias() *PostUpdateOne {
	puo.mutation.ClearMedias()
	return puo
}

// RemoveMediaIDs removes the "medias" edge to Media entities by IDs.
func (puo *PostUpdateOne) RemoveMediaIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveMediaIDs(ids...)
	return puo
}

// RemoveMedias removes "medias" edges to Media entities.
func (puo *PostUpdateOne) RemoveMedias(m ...*Media) *PostUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMediaIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.SubscriptionID(); ok {
		_spec.SetField(post.FieldSubscriptionID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSubscriptionID(); ok {
		_spec.AddField(post.FieldSubscriptionID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Text(); ok {
		_spec.SetField(post.FieldText, field.TypeString, value)
	}
	if value, ok := puo.mutation.PostedAt(); ok {
		_spec.SetField(post.FieldPostedAt, field.TypeString, value)
	}
	if puo.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMediasIDs(); len(nodes) > 0 && !puo.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MediasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
