// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ofdl/ofdl/model"
)

func newMedia(db *gorm.DB, opts ...gen.DOOption) media {
	_media := media{}

	_media.mediaDo.UseDB(db, opts...)
	_media.mediaDo.UseModel(&model.Media{})

	tableName := _media.mediaDo.TableName()
	_media.ALL = field.NewAsterisk(tableName)
	_media.ID = field.NewUint(tableName, "id")
	_media.CreatedAt = field.NewTime(tableName, "created_at")
	_media.UpdatedAt = field.NewTime(tableName, "updated_at")
	_media.DeletedAt = field.NewField(tableName, "deleted_at")
	_media.PostID = field.NewUint(tableName, "post_id")
	_media.Type = field.NewString(tableName, "type")
	_media.Full = field.NewString(tableName, "full")
	_media.DownloadedAt = field.NewTime(tableName, "downloaded_at")
	_media.StashID = field.NewString(tableName, "stash_id")
	_media.OrganizedAt = field.NewTime(tableName, "organized_at")
	_media.Post = mediaBelongsToPost{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Post", "model.Post"),
		Subscription: struct {
			field.RelationField
			Posts struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Post.Subscription", "model.Subscription"),
			Posts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Post.Subscription.Posts", "model.Post"),
			},
		},
		Medias: struct {
			field.RelationField
			Post struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Post.Medias", "model.Media"),
			Post: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Post.Medias.Post", "model.Post"),
			},
		},
	}

	_media.fillFieldMap()

	return _media
}

type media struct {
	mediaDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	PostID       field.Uint
	Type         field.String
	Full         field.String
	DownloadedAt field.Time
	StashID      field.String
	OrganizedAt  field.Time
	Post         mediaBelongsToPost

	fieldMap map[string]field.Expr
}

func (m media) Table(newTableName string) *media {
	m.mediaDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m media) As(alias string) *media {
	m.mediaDo.DO = *(m.mediaDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *media) updateTableName(table string) *media {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.PostID = field.NewUint(table, "post_id")
	m.Type = field.NewString(table, "type")
	m.Full = field.NewString(table, "full")
	m.DownloadedAt = field.NewTime(table, "downloaded_at")
	m.StashID = field.NewString(table, "stash_id")
	m.OrganizedAt = field.NewTime(table, "organized_at")

	m.fillFieldMap()

	return m
}

func (m *media) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *media) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["post_id"] = m.PostID
	m.fieldMap["type"] = m.Type
	m.fieldMap["full"] = m.Full
	m.fieldMap["downloaded_at"] = m.DownloadedAt
	m.fieldMap["stash_id"] = m.StashID
	m.fieldMap["organized_at"] = m.OrganizedAt

}

func (m media) clone(db *gorm.DB) media {
	m.mediaDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m media) replaceDB(db *gorm.DB) media {
	m.mediaDo.ReplaceDB(db)
	return m
}

type mediaBelongsToPost struct {
	db *gorm.DB

	field.RelationField

	Subscription struct {
		field.RelationField
		Posts struct {
			field.RelationField
		}
	}
	Medias struct {
		field.RelationField
		Post struct {
			field.RelationField
		}
	}
}

func (a mediaBelongsToPost) Where(conds ...field.Expr) *mediaBelongsToPost {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mediaBelongsToPost) WithContext(ctx context.Context) *mediaBelongsToPost {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mediaBelongsToPost) Session(session *gorm.Session) *mediaBelongsToPost {
	a.db = a.db.Session(session)
	return &a
}

func (a mediaBelongsToPost) Model(m *model.Media) *mediaBelongsToPostTx {
	return &mediaBelongsToPostTx{a.db.Model(m).Association(a.Name())}
}

type mediaBelongsToPostTx struct{ tx *gorm.Association }

func (a mediaBelongsToPostTx) Find() (result *model.Post, err error) {
	return result, a.tx.Find(&result)
}

func (a mediaBelongsToPostTx) Append(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mediaBelongsToPostTx) Replace(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mediaBelongsToPostTx) Delete(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mediaBelongsToPostTx) Clear() error {
	return a.tx.Clear()
}

func (a mediaBelongsToPostTx) Count() int64 {
	return a.tx.Count()
}

type mediaDo struct{ gen.DO }

type IMediaDo interface {
	gen.SubQuery
	Debug() IMediaDo
	WithContext(ctx context.Context) IMediaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMediaDo
	WriteDB() IMediaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMediaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMediaDo
	Not(conds ...gen.Condition) IMediaDo
	Or(conds ...gen.Condition) IMediaDo
	Select(conds ...field.Expr) IMediaDo
	Where(conds ...gen.Condition) IMediaDo
	Order(conds ...field.Expr) IMediaDo
	Distinct(cols ...field.Expr) IMediaDo
	Omit(cols ...field.Expr) IMediaDo
	Join(table schema.Tabler, on ...field.Expr) IMediaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMediaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMediaDo
	Group(cols ...field.Expr) IMediaDo
	Having(conds ...gen.Condition) IMediaDo
	Limit(limit int) IMediaDo
	Offset(offset int) IMediaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMediaDo
	Unscoped() IMediaDo
	Create(values ...*model.Media) error
	CreateInBatches(values []*model.Media, batchSize int) error
	Save(values ...*model.Media) error
	First() (*model.Media, error)
	Take() (*model.Media, error)
	Last() (*model.Media, error)
	Find() ([]*model.Media, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Media, err error)
	FindInBatches(result *[]*model.Media, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Media) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMediaDo
	Assign(attrs ...field.AssignExpr) IMediaDo
	Joins(fields ...field.RelationField) IMediaDo
	Preload(fields ...field.RelationField) IMediaDo
	FirstOrInit() (*model.Media, error)
	FirstOrCreate() (*model.Media, error)
	FindByPage(offset int, limit int) (result []*model.Media, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMediaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	Missing(limit int) (result []*model.Media, err error)
	Unorganized(limit int) (result []model.Media, err error)
	FindByStashID(stashID string) (result model.Media, err error)
}

// select * from @@table WHERE downloaded_at IS NULL LIMIT @limit
func (m mediaDo) Missing(limit int) (result []*model.Media, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("select * from media WHERE downloaded_at IS NULL LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from @@table WHERE organized_at IS NULL LIMIT @limit
func (m mediaDo) Unorganized(limit int) (result []model.Media, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("select * from media WHERE organized_at IS NULL LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from @@table WHERE stash_id = $stashID
func (m mediaDo) FindByStashID(stashID string) (result model.Media, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from media WHERE stash_id = $stashID ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mediaDo) Debug() IMediaDo {
	return m.withDO(m.DO.Debug())
}

func (m mediaDo) WithContext(ctx context.Context) IMediaDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mediaDo) ReadDB() IMediaDo {
	return m.Clauses(dbresolver.Read)
}

func (m mediaDo) WriteDB() IMediaDo {
	return m.Clauses(dbresolver.Write)
}

func (m mediaDo) Session(config *gorm.Session) IMediaDo {
	return m.withDO(m.DO.Session(config))
}

func (m mediaDo) Clauses(conds ...clause.Expression) IMediaDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mediaDo) Returning(value interface{}, columns ...string) IMediaDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mediaDo) Not(conds ...gen.Condition) IMediaDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mediaDo) Or(conds ...gen.Condition) IMediaDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mediaDo) Select(conds ...field.Expr) IMediaDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mediaDo) Where(conds ...gen.Condition) IMediaDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mediaDo) Order(conds ...field.Expr) IMediaDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mediaDo) Distinct(cols ...field.Expr) IMediaDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mediaDo) Omit(cols ...field.Expr) IMediaDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mediaDo) Join(table schema.Tabler, on ...field.Expr) IMediaDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mediaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMediaDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mediaDo) RightJoin(table schema.Tabler, on ...field.Expr) IMediaDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mediaDo) Group(cols ...field.Expr) IMediaDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mediaDo) Having(conds ...gen.Condition) IMediaDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mediaDo) Limit(limit int) IMediaDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mediaDo) Offset(offset int) IMediaDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mediaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMediaDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mediaDo) Unscoped() IMediaDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mediaDo) Create(values ...*model.Media) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mediaDo) CreateInBatches(values []*model.Media, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mediaDo) Save(values ...*model.Media) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mediaDo) First() (*model.Media, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) Take() (*model.Media, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) Last() (*model.Media, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) Find() ([]*model.Media, error) {
	result, err := m.DO.Find()
	return result.([]*model.Media), err
}

func (m mediaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Media, err error) {
	buf := make([]*model.Media, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mediaDo) FindInBatches(result *[]*model.Media, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mediaDo) Attrs(attrs ...field.AssignExpr) IMediaDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mediaDo) Assign(attrs ...field.AssignExpr) IMediaDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mediaDo) Joins(fields ...field.RelationField) IMediaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mediaDo) Preload(fields ...field.RelationField) IMediaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mediaDo) FirstOrInit() (*model.Media, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) FirstOrCreate() (*model.Media, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) FindByPage(offset int, limit int) (result []*model.Media, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mediaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mediaDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mediaDo) Delete(models ...*model.Media) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mediaDo) withDO(do gen.Dao) *mediaDo {
	m.DO = *do.(*gen.DO)
	return m
}
