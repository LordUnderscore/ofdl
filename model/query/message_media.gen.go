// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ofdl/ofdl/model"
)

func newMessageMedia(db *gorm.DB, opts ...gen.DOOption) messageMedia {
	_messageMedia := messageMedia{}

	_messageMedia.messageMediaDo.UseDB(db, opts...)
	_messageMedia.messageMediaDo.UseModel(&model.MessageMedia{})

	tableName := _messageMedia.messageMediaDo.TableName()
	_messageMedia.ALL = field.NewAsterisk(tableName)
	_messageMedia.ID = field.NewUint(tableName, "id")
	_messageMedia.CreatedAt = field.NewTime(tableName, "created_at")
	_messageMedia.UpdatedAt = field.NewTime(tableName, "updated_at")
	_messageMedia.DeletedAt = field.NewField(tableName, "deleted_at")
	_messageMedia.MessageID = field.NewUint(tableName, "message_id")
	_messageMedia.Type = field.NewString(tableName, "type")
	_messageMedia.Src = field.NewString(tableName, "src")
	_messageMedia.DownloadedAt = field.NewTime(tableName, "downloaded_at")
	_messageMedia.StashID = field.NewString(tableName, "stash_id")
	_messageMedia.OrganizedAt = field.NewTime(tableName, "organized_at")
	_messageMedia.Message = messageMediaBelongsToMessage{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Message", "model.Message"),
		Subscription: struct {
			field.RelationField
			Posts struct {
				field.RelationField
				Subscription struct {
					field.RelationField
				}
				Medias struct {
					field.RelationField
					Post struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Message.Subscription", "model.Subscription"),
			Posts: struct {
				field.RelationField
				Subscription struct {
					field.RelationField
				}
				Medias struct {
					field.RelationField
					Post struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Message.Subscription.Posts", "model.Post"),
				Subscription: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Message.Subscription.Posts.Subscription", "model.Subscription"),
				},
				Medias: struct {
					field.RelationField
					Post struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Message.Subscription.Posts.Medias", "model.Media"),
					Post: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Message.Subscription.Posts.Medias.Post", "model.Post"),
					},
				},
			},
		},
		Medias: struct {
			field.RelationField
			Message struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Message.Medias", "model.MessageMedia"),
			Message: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Message.Medias.Message", "model.Message"),
			},
		},
	}

	_messageMedia.fillFieldMap()

	return _messageMedia
}

type messageMedia struct {
	messageMediaDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	MessageID    field.Uint
	Type         field.String
	Src          field.String
	DownloadedAt field.Time
	StashID      field.String
	OrganizedAt  field.Time
	Message      messageMediaBelongsToMessage

	fieldMap map[string]field.Expr
}

func (m messageMedia) Table(newTableName string) *messageMedia {
	m.messageMediaDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageMedia) As(alias string) *messageMedia {
	m.messageMediaDo.DO = *(m.messageMediaDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageMedia) updateTableName(table string) *messageMedia {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.MessageID = field.NewUint(table, "message_id")
	m.Type = field.NewString(table, "type")
	m.Src = field.NewString(table, "src")
	m.DownloadedAt = field.NewTime(table, "downloaded_at")
	m.StashID = field.NewString(table, "stash_id")
	m.OrganizedAt = field.NewTime(table, "organized_at")

	m.fillFieldMap()

	return m
}

func (m *messageMedia) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageMedia) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["message_id"] = m.MessageID
	m.fieldMap["type"] = m.Type
	m.fieldMap["src"] = m.Src
	m.fieldMap["downloaded_at"] = m.DownloadedAt
	m.fieldMap["stash_id"] = m.StashID
	m.fieldMap["organized_at"] = m.OrganizedAt

}

func (m messageMedia) clone(db *gorm.DB) messageMedia {
	m.messageMediaDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageMedia) replaceDB(db *gorm.DB) messageMedia {
	m.messageMediaDo.ReplaceDB(db)
	return m
}

type messageMediaBelongsToMessage struct {
	db *gorm.DB

	field.RelationField

	Subscription struct {
		field.RelationField
		Posts struct {
			field.RelationField
			Subscription struct {
				field.RelationField
			}
			Medias struct {
				field.RelationField
				Post struct {
					field.RelationField
				}
			}
		}
	}
	Medias struct {
		field.RelationField
		Message struct {
			field.RelationField
		}
	}
}

func (a messageMediaBelongsToMessage) Where(conds ...field.Expr) *messageMediaBelongsToMessage {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a messageMediaBelongsToMessage) WithContext(ctx context.Context) *messageMediaBelongsToMessage {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a messageMediaBelongsToMessage) Session(session *gorm.Session) *messageMediaBelongsToMessage {
	a.db = a.db.Session(session)
	return &a
}

func (a messageMediaBelongsToMessage) Model(m *model.MessageMedia) *messageMediaBelongsToMessageTx {
	return &messageMediaBelongsToMessageTx{a.db.Model(m).Association(a.Name())}
}

type messageMediaBelongsToMessageTx struct{ tx *gorm.Association }

func (a messageMediaBelongsToMessageTx) Find() (result *model.Message, err error) {
	return result, a.tx.Find(&result)
}

func (a messageMediaBelongsToMessageTx) Append(values ...*model.Message) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a messageMediaBelongsToMessageTx) Replace(values ...*model.Message) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a messageMediaBelongsToMessageTx) Delete(values ...*model.Message) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a messageMediaBelongsToMessageTx) Clear() error {
	return a.tx.Clear()
}

func (a messageMediaBelongsToMessageTx) Count() int64 {
	return a.tx.Count()
}

type messageMediaDo struct{ gen.DO }

type IMessageMediaDo interface {
	gen.SubQuery
	Debug() IMessageMediaDo
	WithContext(ctx context.Context) IMessageMediaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageMediaDo
	WriteDB() IMessageMediaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageMediaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageMediaDo
	Not(conds ...gen.Condition) IMessageMediaDo
	Or(conds ...gen.Condition) IMessageMediaDo
	Select(conds ...field.Expr) IMessageMediaDo
	Where(conds ...gen.Condition) IMessageMediaDo
	Order(conds ...field.Expr) IMessageMediaDo
	Distinct(cols ...field.Expr) IMessageMediaDo
	Omit(cols ...field.Expr) IMessageMediaDo
	Join(table schema.Tabler, on ...field.Expr) IMessageMediaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageMediaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageMediaDo
	Group(cols ...field.Expr) IMessageMediaDo
	Having(conds ...gen.Condition) IMessageMediaDo
	Limit(limit int) IMessageMediaDo
	Offset(offset int) IMessageMediaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageMediaDo
	Unscoped() IMessageMediaDo
	Create(values ...*model.MessageMedia) error
	CreateInBatches(values []*model.MessageMedia, batchSize int) error
	Save(values ...*model.MessageMedia) error
	First() (*model.MessageMedia, error)
	Take() (*model.MessageMedia, error)
	Last() (*model.MessageMedia, error)
	Find() ([]*model.MessageMedia, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageMedia, err error)
	FindInBatches(result *[]*model.MessageMedia, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageMedia) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageMediaDo
	Assign(attrs ...field.AssignExpr) IMessageMediaDo
	Joins(fields ...field.RelationField) IMessageMediaDo
	Preload(fields ...field.RelationField) IMessageMediaDo
	FirstOrInit() (*model.MessageMedia, error)
	FirstOrCreate() (*model.MessageMedia, error)
	FindByPage(offset int, limit int) (result []*model.MessageMedia, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageMediaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	Missing(limit int) (result []*model.MessageMedia, err error)
	Unorganized(limit int) (result []model.MessageMedia, err error)
	FindByStashID(stashID string) (result model.MessageMedia, err error)
}

// select * from @@table WHERE downloaded_at IS NULL LIMIT @limit
func (m messageMediaDo) Missing(limit int) (result []*model.MessageMedia, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("select * from message_media WHERE downloaded_at IS NULL LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from @@table WHERE organized_at IS NULL LIMIT @limit
func (m messageMediaDo) Unorganized(limit int) (result []model.MessageMedia, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("select * from message_media WHERE organized_at IS NULL LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from @@table WHERE stash_id = $stashID
func (m messageMediaDo) FindByStashID(stashID string) (result model.MessageMedia, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from message_media WHERE stash_id = $stashID ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m messageMediaDo) Debug() IMessageMediaDo {
	return m.withDO(m.DO.Debug())
}

func (m messageMediaDo) WithContext(ctx context.Context) IMessageMediaDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageMediaDo) ReadDB() IMessageMediaDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageMediaDo) WriteDB() IMessageMediaDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageMediaDo) Session(config *gorm.Session) IMessageMediaDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageMediaDo) Clauses(conds ...clause.Expression) IMessageMediaDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageMediaDo) Returning(value interface{}, columns ...string) IMessageMediaDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageMediaDo) Not(conds ...gen.Condition) IMessageMediaDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageMediaDo) Or(conds ...gen.Condition) IMessageMediaDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageMediaDo) Select(conds ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageMediaDo) Where(conds ...gen.Condition) IMessageMediaDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageMediaDo) Order(conds ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageMediaDo) Distinct(cols ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageMediaDo) Omit(cols ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageMediaDo) Join(table schema.Tabler, on ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageMediaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageMediaDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageMediaDo) Group(cols ...field.Expr) IMessageMediaDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageMediaDo) Having(conds ...gen.Condition) IMessageMediaDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageMediaDo) Limit(limit int) IMessageMediaDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageMediaDo) Offset(offset int) IMessageMediaDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageMediaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageMediaDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageMediaDo) Unscoped() IMessageMediaDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageMediaDo) Create(values ...*model.MessageMedia) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageMediaDo) CreateInBatches(values []*model.MessageMedia, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageMediaDo) Save(values ...*model.MessageMedia) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageMediaDo) First() (*model.MessageMedia, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageMedia), nil
	}
}

func (m messageMediaDo) Take() (*model.MessageMedia, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageMedia), nil
	}
}

func (m messageMediaDo) Last() (*model.MessageMedia, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageMedia), nil
	}
}

func (m messageMediaDo) Find() ([]*model.MessageMedia, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageMedia), err
}

func (m messageMediaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageMedia, err error) {
	buf := make([]*model.MessageMedia, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageMediaDo) FindInBatches(result *[]*model.MessageMedia, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageMediaDo) Attrs(attrs ...field.AssignExpr) IMessageMediaDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageMediaDo) Assign(attrs ...field.AssignExpr) IMessageMediaDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageMediaDo) Joins(fields ...field.RelationField) IMessageMediaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageMediaDo) Preload(fields ...field.RelationField) IMessageMediaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageMediaDo) FirstOrInit() (*model.MessageMedia, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageMedia), nil
	}
}

func (m messageMediaDo) FirstOrCreate() (*model.MessageMedia, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageMedia), nil
	}
}

func (m messageMediaDo) FindByPage(offset int, limit int) (result []*model.MessageMedia, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageMediaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageMediaDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageMediaDo) Delete(models ...*model.MessageMedia) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageMediaDo) withDO(do gen.Dao) *messageMediaDo {
	m.DO = *do.(*gen.DO)
	return m
}
